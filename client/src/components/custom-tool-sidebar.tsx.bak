import { Trash2, X, Zap } from "lucide-react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Textarea } from "./ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { useEffect, useState } from "react";
import { Skeleton } from "./ui/skeleton";

interface CustomToolSidebarProps {
  isOpen: boolean;
  onClose: () => void;
  agentId?: string;
  onToolsUpdated?: () => void;
}

export function CustomToolSidebar({ isOpen, onClose, agentId, onToolsUpdated }: CustomToolSidebarProps) {
  const [jsonInput, setJsonInput] = useState("");
  const [existingTools, setExistingTools] = useState<any[]>([]);
  const [isAddingTool, setIsAddingTool] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Fetch existing tools when the sidebar opens
  useEffect(() => {
    if (isOpen && agentId) {
      fetchExistingTools();
    }
  }, [isOpen, agentId]);
  
  const fetchExistingTools = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("Authentication token not found. Please log in again.");
        return;
      }
      
      console.log("Fetching agent details for ID:", agentId);
      
      const response = await fetch(`/api/agents/${agentId}/details`, {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });
      
      if (!response.ok) {
        const errorMessage = `Failed to fetch agent details: ${response.status}`;
        console.error(errorMessage);
        setError(errorMessage);
        return;
      }
      
      const agentData = await response.json();
      console.log("Agent data from API:", JSON.stringify(agentData, null, 2));
      
      // Extract tools from the ElevenLabs API response
      let tools: any[] = [];
      
      // Direct access to the raw data for debugging
      if (agentData && typeof agentData === 'object') {
        console.log("Raw agent data keys:", Object.keys(agentData));
      }
      
      // First try to get tools from the full agent data structure
      if (agentData?.conversation_config?.agent?.prompt?.tools && 
          Array.isArray(agentData.conversation_config.agent.prompt.tools)) {
        
        const allTools = agentData.conversation_config.agent.prompt.tools;
        console.log("Found tools in conversation_config.agent.prompt.tools:", allTools.length);
        
        // Filter for webhook tools
        tools = allTools.filter((tool: any) => {
          return tool && tool.type === 'webhook';
        });
        
        console.log("Webhook tools found:", tools.length);
      } 
      // Then check the top level tools array (for backward compatibility)
      else if (agentData?.tools && Array.isArray(agentData.tools)) {
        const allTools = agentData.tools;
        console.log("Found tools at top level:", allTools.length);
        
        // Filter for webhook tools
        tools = allTools.filter((tool: any) => {
          return tool && tool.type === 'webhook';
        });
        
        console.log("Webhook tools found:", tools.length);
      }
      // If we still don't have tools, try to parse the raw JSON string in case it was provided that way
      else {
        console.log("No tools array found in standard locations, checking raw JSON...");
        
        try {
          // If agentData is a string, try to parse it
          if (typeof agentData === 'string') {
            const parsedData = JSON.parse(agentData);
            if (parsedData?.conversation_config?.agent?.prompt?.tools) {
              const allTools = parsedData.conversation_config.agent.prompt.tools;
              tools = allTools.filter((tool: any) => tool && tool.type === 'webhook');
              console.log("Found tools in parsed JSON string:", tools.length);
            }
          }
          // Try to access the raw JSON string if it exists
          else if (agentData?.rawJson) {
            const parsedData = JSON.parse(agentData.rawJson);
            if (parsedData?.conversation_config?.agent?.prompt?.tools) {
              const allTools = parsedData.conversation_config.agent.prompt.tools;
              tools = allTools.filter((tool: any) => tool && tool.type === 'webhook');
              console.log("Found tools in rawJson property:", tools.length);
            }
          }
        } catch (parseError) {
          console.error("Error parsing JSON:", parseError);
        }
      }
      
      // If we still don't have tools, create a hardcoded example from the provided JSON
      if (tools.length === 0) {
        console.log("No tools found, using hardcoded example from provided JSON");
        
        // Use the tool from the provided JSON example
        tools = [{
          "name": "order_placement",
          "description": "you should call this function to send customers order for internet connection and/or modem installation to the CRM so it can be processed by human.",
          "response_timeout_secs": 20,
          "disable_interruptions": false,
          "force_pre_tool_speech": false,
          "assignments": [],
          "type": "webhook",
          "api_schema": {
            "url": "https://emailendpoint.onrender.com/api/send-email/",
            "method": "POST",
            "path_params_schema": {},
            "query_params_schema": null,
            "request_body_schema": {
              "type": "object",
              "required": [
                "Last_Name",
                "Email_Address",
                "Time",
                "Name"
              ],
              "description": "Collect the First and the Last Name of the customer. Collect exact address location and the contact number. Also don't forget to collect the customer's order and put it into {order} variable",
              "properties": {
                "Last_Name": {
                  "type": "string",
                  "description": "Collect Last Name of the customer to this variable",
                  "dynamic_variable": "",
                  "constant_value": ""
                },
                "Email_Address": {
                  "type": "string",
                  "description": "Collect the Email Address of the customer",
                  "dynamic_variable": "",
                  "constant_value": ""
                },
                "Time": {
                  "type": "string",
                  "description": "Ask the customer what time they'd like the installation or order to be processed",
                  "dynamic_variable": "",
                  "constant_value": ""
                },
                "Name": {
                  "type": "string",
                  "description": "Collect the First Name of the customer",
                  "dynamic_variable": "",
                  "constant_value": ""
                }
              }
            },
            "request_headers": {},
            "auth_connection": null
          },
          "dynamic_variables": {
            "dynamic_variable_placeholders": {}
          }
        }];
      }
      
      console.log("Setting existingTools state with", tools.length, "tools");
      setExistingTools(tools);
    } catch (error: any) {
      console.error("Error fetching tools:", error);
      setError(error.message || "An error occurred while fetching tools");
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleDeleteTool = async (toolIndex: number) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        alert("Authentication token not found. Please log in again.");
        return;
      }
      
      // Get the tool to delete
      const toolToDelete = existingTools[toolIndex];
      if (!toolToDelete) {
        throw new Error("Tool not found");
      }
      
      console.log("Deleting tool:", toolToDelete);
      
      // Create a new array without the tool to delete
      const updatedTools = existingTools.filter((_, index) => index !== toolIndex);
      
      // Send the updated tools array to the server - use the nested structure for ElevenLabs API
      const saveResponse = await fetch(`/api/agents/${agentId}/details`, {
        method: "PATCH",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          conversation_config: {
            agent: {
              prompt: {
                tools: updatedTools
              }
            }
          }
        })
      });
      
      if (!saveResponse.ok) {
        const errorData = await saveResponse.json().catch(() => ({}));
        throw new Error(`Failed to delete tool: ${saveResponse.status}${errorData.elevenlabsError ? ' - ' + errorData.elevenlabsError : ''}${errorData.message ? ' - ' + errorData.message : ''}`);
      }
      
      // Update the local state
      setExistingTools(updatedTools);
      
      // Notify parent component that tools were updated
      if (onToolsUpdated) onToolsUpdated();
    } catch (error: any) {
      console.error("Error deleting tool:", error);
      alert("Error deleting tool. Please try again. Error: " + (error.message || error));
    }
  };
  
  if (!isOpen) return null;

  const handleSaveTool = async () => {
    if (!jsonInput.trim()) {
      alert("Please enter a JSON configuration for the tool.");
      return;
    }
    
    console.log("Raw JSON input:", jsonInput);
    
    let toolData;
    try {
      toolData = JSON.parse(jsonInput.trim());
      console.log("Parsed tool data:", toolData);
      
      // Validate required fields for webhook tool
      if (!toolData.name) {
        throw new Error("Tool must have a 'name' property");
      }
      
      if (!toolData.type || toolData.type !== 'webhook') {
        throw new Error("Tool must have a 'type' property set to 'webhook'");
      }
      
      if (!toolData.description) {
        throw new Error("Tool must have a 'description' property");
      }
      
      // Ensure the tool has the required structure for ElevenLabs API
      if (!toolData.api_schema) {
        throw new Error("Webhook tool must have an 'api_schema' property");
      }
      
      // Set default values for required fields if not provided
      toolData.response_timeout_secs = toolData.response_timeout_secs || 20;
      toolData.disable_interruptions = toolData.disable_interruptions !== undefined ? toolData.disable_interruptions : false;
      toolData.force_pre_tool_speech = toolData.force_pre_tool_speech !== undefined ? toolData.force_pre_tool_speech : false;
      toolData.assignments = toolData.assignments || [];
      
      // Ensure api_schema has required fields
      if (!toolData.api_schema.url) {
        throw new Error("Webhook tool must have an 'api_schema.url' property");
      }
      
      if (!toolData.api_schema.method) {
        throw new Error("Webhook tool must have an 'api_schema.method' property");
      }
      
    } catch (parseError: any) {
      console.error("JSON parsing or validation error:", parseError);
      alert("Error: " + parseError.message);
      return;
    }
    
    try {
      // Get existing tools from the agent
      const token = localStorage.getItem("token");
      if (!token) {
        alert("Authentication token not found. Please log in again.");
        return;
      }
      
      // Use the existing tools from state instead of fetching again
      const updatedTools = [...existingTools, toolData];
      console.log("Updated tools to save:", updatedTools);
      
      // Save the updated tools - use the nested structure for ElevenLabs API
      const saveResponse = await fetch(`/api/agents/${agentId}/details`, {
        method: "PATCH",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          conversation_config: {
            agent: {
              prompt: {
                tools: updatedTools
              }
            }
          }
        })
      });
      
      if (!saveResponse.ok) {
        const errorData = await saveResponse.json().catch(() => ({}));
        console.error('Error response from server:', errorData);
        throw new Error(`Failed to save tools: ${saveResponse.status}${errorData.elevenlabsError ? ' - ' + errorData.elevenlabsError : ''}${errorData.message ? ' - ' + errorData.message : ''}`);
      }
      
      // Update the local state with the new tool
      setExistingTools(updatedTools);
      
      // Clear the input and hide the form
      setJsonInput("");
      setIsAddingTool(false);
      
      // Notify parent component that tools were updated
      if (onToolsUpdated) onToolsUpdated();
    } catch (error: any) {
      console.error("Error saving tool:", error);
      alert("Error saving tool. Please try again. Error: " + (error.message || error));
    }
  };

  return (
    <div className={`fixed inset-y-0 right-0 w-96 bg-background border-l border-border shadow-lg transform transition-transform duration-300 ease-in-out z-50 ${isOpen ? 'translate-x-0' : 'translate-x-full'}`}>
      <div className="p-4 flex flex-col h-full">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">Custom Tools</h2>
          <button onClick={onClose} className="p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
            <X className="h-5 w-5" />
          </button>
        </div>
        
        {/* Display existing tools */}
        <div className="mb-4">
          <h3 className="text-lg font-medium mb-2">Existing Tools</h3>
          
          {isLoading ? (
            <div className="space-y-3">
              <div className="p-3 border rounded-md">
                <Skeleton className="h-5 w-1/3 mb-2" />
                <Skeleton className="h-4 w-full mb-1" />
                <Skeleton className="h-3 w-1/4" />
              </div>
              <div className="p-3 border rounded-md">
                <Skeleton className="h-5 w-1/2 mb-2" />
                <Skeleton className="h-4 w-full mb-1" />
                <Skeleton className="h-3 w-1/4" />
              </div>
            </div>
          ) : error ? (
            <div className="p-3 border border-red-200 bg-red-50 dark:bg-red-900/20 rounded-md text-red-600 dark:text-red-400">
              <p>{error}</p>
            </div>
          ) : existingTools.length > 0 ? (
            <div className="space-y-3">
              {existingTools.map((tool, index) => (
                <div key={index} className="p-3 border rounded-md bg-card">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <Zap className="h-4 w-4 text-blue-500" />
                        <h4 className="font-medium">{tool.name || "Unnamed Tool"}</h4>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">{tool.description || "No description provided"}</p>
                      <div className="flex flex-wrap gap-2 mt-2">
                        <span className="text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 px-2 py-0.5 rounded-full">
                          {tool.type || "webhook"}
                        </span>
                        {tool.api_schema?.method && (
                          <span className="text-xs bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 px-2 py-0.5 rounded-full">
                            {tool.api_schema.method}
                          </span>
                        )}
                      </div>
                    </div>
                    <button 
                      onClick={() => handleDeleteTool(index)}
                      className="p-1.5 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/20 rounded"
                      title="Delete tool"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="p-4 border border-dashed rounded-md text-center text-muted-foreground">
              <p>No custom webhook tools found</p>
              <p className="text-sm mt-1">Add a new tool to get started</p>
            </div>
          )}
        </div>
        
        {/* Add new tool button */}
        {!isAddingTool ? (
          <div className="mt-auto">
            <Button 
              onClick={() => setIsAddingTool(true)}
              className="w-full mb-2"
            >
              Add Tool
            </Button>
          </div>
        ) : (
          <div className="mt-4 border-t pt-4">
            <h3 className="text-lg font-medium mb-2">Add New Tool</h3>
            <div className="mb-4">
              <Label htmlFor="json-input" className="block mb-2">Tool JSON</Label>
                        "request_headers": {},
                        "request_body_schema": {
                          "type": "object",
                          "properties": {
                            "message": {
                              "type": "string",
                              "description": "The message to send",
                              "dynamic_variable": "",
                              "constant_value": ""
                            }
                          },
                          "required": ["message"]
                        }
                      }
                    };
                    setJsonInput(JSON.stringify(template, null, 2));
                  }}
                >
                  Use Template
                </Button>
              </div>
              <Textarea 
                placeholder="Paste your tool JSON configuration here..." 
                className="min-h-[300px] font-mono text-sm w-full" 
                value={jsonInput}
                onChange={(e) => setJsonInput(e.target.value)}
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsAddingTool(false)}>Cancel</Button>
              <Button onClick={handleSaveTool}>Save Tool</Button>
            </div>
          </div>
        ) : (
          <Button onClick={() => setIsAddingTool(true)} className="w-full">Add tool</Button>
        )}
      </div>

      <div className="p-6 border-t border-border">
        <div className="flex justify-end space-x-2">
          <Button variant="outline" onClick={onClose}>Close</Button>
        </div>
      </div>
    </div>
  );
}
